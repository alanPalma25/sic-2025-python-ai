{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "49909eb6",
      "metadata": {
        "id": "49909eb6"
      },
      "source": [
        "# Actividades Capítulo 6.\n",
        "\n",
        "\n",
        "# Algoritmos de clasificación.\n",
        "\n",
        "## Resumen de actividades\n",
        "\n",
        "- **Unidad 30.** Enfoque Greedy algoritmos voraces o ávidos.\n",
        "- **Unidad 31.** Divide y vencerás\n",
        "- **Unidad 32.** Programación dinámica\n",
        "- **Unidad 33.** Retroceso\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "780f0fff",
      "metadata": {
        "id": "780f0fff"
      },
      "source": [
        "# Actividad: Algoritmos Greedy.\n",
        "\n",
        "\n",
        "## Instrucciones\n",
        "\n",
        "1. Explique brevemente y en forma clara qué es un algoritmo Greedy y como funciona..\n",
        "\n",
        "2. Enumera algunas ventajas.\n",
        "\n",
        "3. Enumera algunas desventajas.\n",
        "\n",
        "4. Escriba el código desarrollado con el enfoque Greeddy para el problema de cambio de monedas, haga diferentes pruebas cambian las entradas (recuerde que las entrada de este algoritmo son las monedas disponibles y la cantida que se desea cubrir, con estas entradas el algoritmo debe retornar la combinación de monedas que cubre el monto solicitado, minimizando la cantidad de monedas usadas)\n",
        "\n",
        "5. Ahora pruebe los resultados con siguientes entradas: monedas_disponibles = [11, 5, 1] para cubrer la cantidad de 15, observe los resultados, haga algunas analísis de lo que pasaria con esta combinación de entradas.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "21a779a5",
      "metadata": {
        "id": "21a779a5"
      },
      "outputs": [],
      "source": [
        "# Espacio disponible para desarrollar el código y agregar los comentarios necesarios.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "89395b47",
      "metadata": {
        "id": "89395b47"
      },
      "source": [
        "# Actividad: Replique el código de la búsqueda de la trayectoria triangular mínima.\n",
        "\n",
        "\n",
        "## Instrucciones\n",
        "\n",
        "\n",
        "1. Replique el código mostrado en la unidad 31.\n",
        "\n",
        "2. Analice el código replicado y agregue una explicíon sonbre su funcionamiento.\n",
        "\n",
        "3. Haga diferentes pruebas cambiando la entrada.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d446e273",
      "metadata": {
        "id": "d446e273"
      },
      "outputs": [],
      "source": [
        "# Espacio para desarrollar el código y agregar los comentarios necesarios.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "881569fc",
      "metadata": {
        "id": "881569fc"
      },
      "source": [
        "# Actividad: Búsqueda binaria con iteración.\n",
        "\n",
        "\n",
        "## Instrucciones\n",
        "\n",
        "\n",
        "1. Replique el código mostrado en la unidad 31.\n",
        "\n",
        "2. Analice el código replicado y agregue una explicíon sonbre su funcionamiento.\n",
        "\n",
        "3. Explique por qué es necesario usar usar una función recursiva.\n",
        "\n",
        "4. Haga diferentes pruebas cambiando la entrada.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0b1f525d",
      "metadata": {
        "id": "0b1f525d"
      },
      "outputs": [],
      "source": [
        "# Espacio para desarrollar el código y agregar los comentarios necesarios.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1087c522",
      "metadata": {
        "id": "1087c522"
      },
      "source": [
        " Actividad: Comparación entre programación dinámica y la metodología divide y venceras.\n",
        "\n",
        "\n",
        "## Instrucciones\n",
        "\n",
        "\n",
        "1. Enumera las diferencias entre los dos efoques.\n",
        "\n",
        "2. Nombre algunos casos donde funcionam mejor la programación dinámica.\n",
        "\n",
        "3. Nombre ejemplos donde es suficiente usar el enfoque divide y venceras.\n",
        "\n",
        "\n",
        "\n",
        "**Espación para desarrollar la actividad:**\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7aacf433",
      "metadata": {
        "id": "7aacf433"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}